## PREFIX COMPUTATION
given array a of N integer. given Q queries and in eaxh query given L AND r PRINT SUM OF ARRAY ELEMENTS FORM INDEX L TO R(L,R included)

#include<bits/stdc++.h>
using namespace std;
const int N= 1e5+10;
int arr[N];
int main()
{
    int n;
    cin>>n;                             #TIME COMPLEXITY(O(N^2));
    int arr[n];
    for( int i=1;i<=n;i++)
    {
        cin>>arr[i];
       
    }
    
    int q;
    cin>>q;
    while(q--)
    {
        int l,r;
        cin>>l>>r;
       long long sum =0;
       for( int i=l;i<=r;i++)
       {
           sum+= arr[i];
       }
       cout<<sum<<endl;
    }
}

### 	Fter prefix computation of 1- d array (above same question)

#include<bits/stdc++.h>
using namespace std;
const int N= 1e5+10;
int arr[N];
int pf[N];
int main()
{
    int n;
    cin>>n;
    int arr[n];                             time complexity :: O(N)
    for( int i=1;i<=n;i++)
    {
        cin>>arr[i];
        pf[i]=pf[i-1]+arr[i];
       
    }
    
    int q;
    cin>>q;
    while(q--)
    {
        int l,r;
        cin>>l>>r;
      
       cout<<pf[r]-pf[l-1]<<endl;
    }
}

## PREFIX COMPUTING IN 2 D array
given 2d array a  of N*N integers.given Q queries and in each query given a,b,c and d print sum of square represented by(a,b) as top left point 
and (c,d) as top bottom right point

#include<bits/stdc++.h>
using namespace std;
const int N= 1e3+10;
int arr[N][N];

int main()
{
    int n;
    cin>>n;
  
    for( int i=1;i<=n;i++)
    {
        for( int j=1;j<=n;j++)
        {
            cin>>arr[i][j];
        }                                                      INPUT:  3
 								       3 6 2
									8 9 2
									3 4 1
									2 
									1 1 2 2
									1 2 3 3
    }
    
    int q;
    cin>>q;
     while( q--)
     {
         int a,b,c,d;
         cin>>a>>b>>c>>d;
         long long sum =0;
         for( int i=a;i<=c;i++)
         {
             for( int j=b;j<=d;j++)
             {
                 sum += arr[i][j];
             }
         }
         cout<<sum<<endl;
         
     }
}
     
# Same QUESTION WITH IMPROVED TIME COMPLEXITY   :

#include<bits/stdc++.h>
using namespace std;
const int N= 1e3+10;
int arr[N][N];
int pf[N][N];

int main()
{
    int n;
    cin>>n;
  
    for( int i=1;i<=n;i++)
    {
        for( int j=1;j<=n;j++)
        {
            cin>>arr[i][j];
            pf[i][j]=arr[i][j]+pf[i-1][j]+pf[i][j-1] - pf[i-1][j-1];
            
        }
    }
    
    int q;
    cin>>q;
     while( q--)
     {
         int a,b,c,d;
         cin>>a>>b>>c>>d;
         
        
         cout<<pf[c][d] - pf[a-1][d]-pf[c][b-1]+pf[a-1][b-1]<<endl;
         
     }
}
     
